12/01/59
===================================================================================
method ที่สมบูรณ์ คือ mthod ที่มีปีกกาเปิดปิด ถึงไม่มีโค้ดเลยก็สมบูรณ์

static 
static ทุกตัวใช้ร่วมกัน เรียกผ่านชื่อ class ได้
ไม่มี static ไม่ได้ใช่รวมกัน เรียกผ่านชื่อ class ไม่ได้

final เติมหน้า x x จะเป็นค่าคงที่ เปลี่ยนค่าไม่ได้อีกแล้ว
เติมหน้า method คลาสลูก จะ overline ไม่ได้ สืบทอดได้อย่างเดียว 
เติมหน้า class จะมี คลาสลูกไม่ได้

abstract
method ที่ไม่สมบูรณ์ นามธรรม สร้าง object ไม่ได้
ถ้า เมธอกเป็น ab คลาสต้องเป็นด้วย แต่ถ้าเมธอดไม่เป็น ab คลาสเป็นได้
ใช้งาน ต้องสร้างคลาสลูกไว้ไปทำงาน
ถ้าแม่ ab ลูกต้อง ab ด้วย ab ห้าม fi fi ห้าม ab


===================================================================================
Ex. static
//class main
package comeng.sut;
public class Sample {
    public static void main(String[] args) {
       Student s1 = new Student("Somsak");
       Student s2 = new Student("Somchai");
       Student.setUniversity("ABC");
       System.out.println(s1.getName()+" studies at "+s1.getUniversity());
       System.out.println(s2.getName()+" studies at "+s2.getUniversity());
       s1.setUniversity("XYZ");
       System.out.println(s1.getName()+" studies at "+s1.getUniversity());
       System.out.println(s2.getName()+" studies at "+s2.getUniversity());
    }
    
}

//class Student
package comeng.sut;
public class Student {
  private   String name; //instance variable
  private static String university; //Class variable (have static)
  public Student(String name){
      this.name = name; // have this = object
  }  
  public String getName(){ //instance method
      return name;
  }
  //class method
  public static void setUniversity(String university){ 
      Student.university = university;
  }
  public static String getUniversity(){
      return Student.university;
  }
}
====================================================================================

ex. final
package comeng.sut;
public class Sample {
    public static void main(String[] args) {
       final int x;
       x=9;
       System.out.println(x); //9
       x=100; //error
       System.out.println(x); //100
       
    }
}

ex.2 final
//class Foo
package comeng.sut;
public class Foo {
    public final void doFoo(){
        System.out.println("doFoo in Foo");
    }
}

//class Boo
package comeng.sut;
public class Boo extends Foo {
    public void doFoo(){ //error
        System.out.println("doFoo in Boo");
    }
}

ex.3
//class Foo
package comeng.sut;
public final class Foo {
    public  void doFoo(){
        System.out.println("doFoo in Foo");
    }
}

//class Boo
package comeng.sut;
public class Boo extends Foo { //error
    public void doFoo(){
        System.out.println("doFoo in Boo");
    }
}
===================================================================================

ex. abstract
//class main
package comeng.sut;
public class Sample {
    public static void main(String[] args) {
       Boo b = new Boo();
       b.doFoo(); //error
    } 
}

//class Foo
package comeng.sut;
public abstract class Foo {
    public abstract void doFoo();  
}

//class Boo
package comeng.sut;
public abstract class Boo extends Foo {
     public abstract void doFoo();
}
====================================================================================

Ex. String
package comeng.sut;
public class Sample {
    public static void main(String[] args) {
      String s = new String("hello");
      System.out.println(s);
      System.out.println(s.length()); //5
      System.out.println(s.charAt(s.length()-1)); //o
      for(int i = s.length()-1;i>=0;i--){
        System.out.print(s.charAt(i)); //olleh
        }
       System.out.println();
       for(int i = 0;i<s.length();i++){
           char ch = s.charAt(i);
           /*if(ch == 'a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'){
               
           }
           else
               System.out.print(ch); //hll*/
           
           if(!(ch == 'a'||ch=='e'||ch=='i'||ch=='o'||ch=='u')){
               System.out.print(ch); //hll

	  /* if(!(ch != 'a'&& ch!='e'&& ch!='i'&& ch!='o'&& ch!='u')){
               System.out.print(ch); //hll */
           }
       }
    }
}

Ex.2 String
package comeng.sut;
public class Sample {
    public static void main(String[] args) {
      String s ="hello";
      System.out.println(s);
      System.out.println(s.length()); //5
      System.out.println(s.charAt(s.length()-1)); //o
      for(int i = s.length()-1;i>=0;i--){
        System.out.print(s.charAt(i)); //olleh
        }
       System.out.println();
       for(int i = 0;i<s.length();i++){
           char ch = s.charAt(i);
           if(!(ch == 'a'||ch=='e'||ch=='i'||ch=='o'||ch=='u')){
               System.out.print(ch); //hll
           }
       }
        System.out.println();
       s = "he34ll2o";
       for(int i = 0;i<s.length();i++){
           char ch = s.charAt(i);
           if(!(Character.isDigit(ch))){
               System.out.print(ch); //hello
           }
          
       }
         System.out.println();
       
         s ="hello";
        char[] c = new char[s.length()];
        c = s.toCharArray();
        System.out.println(c[0]);//h
        String t = new String (c);
        System.out.print(t);//hello
        System.out.println(t.indexOf('h'));//0
        System.out.println(t.indexOf('l'));//2
        System.out.println(t.lastIndexOf('l'));//3
        System.out.println(t.indexOf("lo"));//3
        System.out.println(t.indexOf("he"));//0
        System.out.println(t.contains("hell"));//true
        System.out.println(t.contains("oo"));//false
        System.out.println(t.toUpperCase());//HELLO //ไม่เปลี่ยน เปลี่ยนแค่ตอนพิมเฉยๆ
        System.out.println(t);//hello
        t= t.toUpperCase();
        System.out.println(t);//HELLO
        t=t.toLowerCase();//hello
        System.out.println(t.equals("hello"));//true
        System.out.println(t.equals("heLlo"));//false
        System.out.println(t.equalsIgnoreCase("heLlo"));//true
       
        t="ABC";
        System.out.println(t.compareTo("ABC"));//เทียบ 1-1 เหมือนกัน 0 //0
        System.out.println(t.compareTo("ACC"));//-1 //B-C ถ้าไม่ใช่ 0 หยุดเลย ตัวแรกน้อยกว่า -1 ตัวแรกมากกว่า 1
        System.out.println(t.compareTo("AAC"));//1
        
	 t = "10:20:100";
        String[] m;
        m = t.split(":"); //ใช้ : เป็นตัวแยก
        int[] x = new int[m.length];
        int sum=0;
        for(int i=0;i<m.length;i++){
            x[i]=Integer.parseInt(m[i]);
            sum += x[i];
        }
        System.out.println(sum);//130
        for(int i=0;i<m.length;i++){
            System.out.println(m[i]); //10 20 100
        }

       
    }
}

run.
hello
5
o
olleh
hll
hello
h
hello0
2
3
3
0
true
false
HELLO
hello
HELLO
true
false
true
0
-1
1
130
10
20
100
===================================================================================

interface method in it is only abstact but no write แต่ไม่เขียนก็เข้าใจ 

JAVA is single inheritance คลาสลูกมีคลาสแม่ได้คลาสเดียว ถ้าอยากได้แบบอื่นใช้ interface
คลาสสองคลาสที่แตกต่างสามารถทำอะไรบ้างอย่างร่วมกันได้

Ex.interface 
//class main

//class Vehicle
package comeng.sut;
public class Vehicle {
    public void Move(){
        System.out.println("moving");
        
    }
}

//class Animal
package comeng.sut;
public class Animal {
    public void eat(){
     System.out.println("eating");
    }   
}

//class Bird
package comeng.sut;
public class Bird extends Animal implements Flyable {
    public  void fly(){
        System.out.println("a bird i flying");
    }
}

//class Plane
package comeng.sut;
public class Plane extends Vehicle implements Flyable {
    public void fly(){
        System.out.println("a plane i flying");
    }
}

//interface Flyable
package comeng.sut;
public interface Flyable {
    public abstract void fly(); //void fly();
    
    
}

===================================================================================

Machine is an abstract class
consists of data 
	private String site;
	and getter getSite();

People is abstract class 
consists of data
	private String name;
	and getter getName();

ATM is subclass of Machine
Student is subclass of People

bote ATM and Student can do behavior deposite(double Money);

void depist(double money) is in interface Depositable

EX.
public static void main(String[] args){
ATM a = new ATM("SUT");
Student s = new Student("Somsak");

a.deposite(5000.0);
s.deposite(3000.0);

run.
ATM at site SUT deposits 5000.0 baht
Somsak deposits 3000.0 baht

code
//class main
package comeng.sut;
public class Sample {
    public static void main(String[] args) {
        ATM a = new ATM("SUT");
        Student s = new Student("Somsak");

        a.deposite(5000.0);
        s.deposite(3000.0);       
    }
}

//class Machine
package comeng.sut;
public class Machine {
    private String site;
    public Machine(String site){
        this.site = site;
    }
    public String getSite(){
        return site;
    }
}

//class People
package comeng.sut;
public class People {
    private String name;
    public People(String name){
        this.name = name;
    }
    public String getName(){
        return name;
       }
}

//class ATM
package comeng.sut;
public class ATM extends Machine implements Depositable {
    public ATM(String site){
        super(site);
    }
    public void deposite(double money){
        System.out.println("ATM at  site " + getSite()+ " deposits " + money+ " baht");
    }
}

//class Student
package comeng.sut;
public class Student extends People implements Depositable {
    public Student(String name){
        super(name);
    }
    public void deposite(double money){
        System.out.println(getName()+ " deposits " + money+ " baht");
    }
    
}

//interface Depositable
package comeng.sut;
public interface Depositable {
    void deposite(double money);
}
===================================================================================



